{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"home/","text":"Pyco Created by Duplexes and LemonPi314 Pyco is a Python package designed to help developers make better command line applications faster. It has cross-platform compatibility for Windows, Linux, and macOS. It features colorized terminal input and output, a built-in error logger, progress bars, and an extensive list of ANSI escape code functions. Overview Installation Quick Start API Reference Roadmap Additional Resources Contributing License Installation Use the Python package manager pip to install Pyco. pip install pyco Roadmap Features and tasks planned for the future. [ ] typewrite() function [ ] Enum classes for color and style escape codes [ ] Callable color objects and context managers [ ] Indicator progress bar type [ ] Customizable progress bar styles [ ] More pre-made prefixes Additional Resources Most of the ANSI escape codes were sourced from the following websites: - https://en.wikipedia.org/wiki/ANSI_escape_code - https://docs.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences Contributing This project is a work-in-progress, so any issues and bug reports are greatly appreciated. Pull requests are welcome. For major changes and feature requests, please open an issue first to discuss what you would like to change. License MIT License","title":"Pyco"},{"location":"home/#pyco","text":"Created by Duplexes and LemonPi314 Pyco is a Python package designed to help developers make better command line applications faster. It has cross-platform compatibility for Windows, Linux, and macOS. It features colorized terminal input and output, a built-in error logger, progress bars, and an extensive list of ANSI escape code functions.","title":"Pyco"},{"location":"home/#overview","text":"Installation Quick Start API Reference Roadmap Additional Resources Contributing License","title":"Overview"},{"location":"home/#installation","text":"Use the Python package manager pip to install Pyco. pip install pyco","title":"Installation"},{"location":"home/#roadmap","text":"Features and tasks planned for the future. [ ] typewrite() function [ ] Enum classes for color and style escape codes [ ] Callable color objects and context managers [ ] Indicator progress bar type [ ] Customizable progress bar styles [ ] More pre-made prefixes","title":"Roadmap"},{"location":"home/#additional-resources","text":"Most of the ANSI escape codes were sourced from the following websites: - https://en.wikipedia.org/wiki/ANSI_escape_code - https://docs.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences","title":"Additional Resources"},{"location":"home/#contributing","text":"This project is a work-in-progress, so any issues and bug reports are greatly appreciated. Pull requests are welcome. For major changes and feature requests, please open an issue first to discuss what you would like to change.","title":"Contributing"},{"location":"home/#license","text":"MIT License","title":"License"},{"location":"quick-start/","text":"Quick Start","title":"Quick Start"},{"location":"quick-start/#quick-start","text":"","title":"Quick Start"},{"location":"sidebar/","text":"Home Quick Start API Reference Color Constants Cursor Input/Output Logging Prefixes Progress Bars Terminal Text Utils","title":"Sidebar"},{"location":"api/api/","text":"Color Constants Cursor Input/Output Logging Prefixes Progress Bars Terminal Text Utils","title":"Api"},{"location":"api/color/","text":"Color Color escape code constants and functions. You can combine constants when using them in [ print_message() ] or [ user_input() ], or in other output functions. 4-Bit Colors The original ANSI escape codes for 16 colors (8 normal and 8 bright) can be found as constants under both Color.Fore and Color.Back classes. The precise RGB values for each of the constants will vary depending on the terminal. Constants Constant Description BLACK Black RED Red GREEN Green YELLOW Yellow BLUE Blue MAGENTA Magenta CYAN Cyan WHITE Gray BRIGHT_BLACK Bright black/dark gray BRIGHT_RED Bright red BRIGHT_GREEN Bright green BRIGHT_YELLOW Bright yellow BRIGHT_BLUE Bright blue BRIGHT_MAGENTA Bright magenta BRIGHT_CYAN Bright cyan BRIGHT_WHITE Bright white DEFAULT Default, usually WHITE 8-Bit Colors Most terminals support a palette of 256 colors, accessible with the eight_bit() function. For a detailed list of colors see https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit . eight_bit() takes one parameter which is the number of the color from 0 to 255 . 24-Bit Colors Some terminals support standard RGB values such as (53, 174, 89) . The rgb() and hex() functions allow you to set the foreground or background color from an RGB tuple or HEX string respectively. Styles Style modifiers to change the look of the text. Constants Constant Description RESET Reset all color and style values to their default values BOLD Bold text, interpreted as \"bright color\" on some terminals DIM Dark text, not supported on some terminals ITALIC Italicized text, not supported on some terminals UNDERLNE Underlined text SLOW_BLINK Slowly blinking text, not supported on some terminals FAST_BLINK Fast blinking text, not supported on some terminals INVERT Invert the foreground and background colors STRIKE Striked out text, not supported on some terminals DOUBLE_UNDERLINE Doubly underlined text, interpreted as \"not bold\" on some terminals NORMAL Reset all style values to their default values NO_UNDERLINE Not underlined text NO_INVERT Foreground and background colors not inverted Defaults You can change the default colors used in [ print_message() ] and [ user_input() ] by assigning variables in the Color class to a constant of your choice. Constant Default Value Description DEFAULT_MESSAGE_COLOR Color.Fore.WHITE Default color for message text DEFAULT_PREFIX_COLOR Color.Fore.WHITE Default color for normal prefix text DEFAULT_INPUT_COLOR Color.Fore.WHITE Default color for user input text ERROR Color.Fore.BRIGHT_RED Default color for error prefixes WARNING Color.Fore.BRIGHT_YELLOW Default color for warning prefixes SUCCESS Color.Fore.BRIGHT_GREEN Default color for success prefixes INFO Color.Fore.WHITE Default color for info prefixes Examples demo-color.py Click to expand from pyco import * print(Fore.DEFAULT + Back.DEFAULT + \"Plain text with default colors\" + Style.RESET) print(Fore.RED + Back.BRIGHT_YELLOW + \"Dark red text on a bright yellow background\" + Style.RESET) print(Fore.BRIGHT_GREEN + \"Bright green text\") print(\"Text is still bright green\" + Style.RESET) print(\"Reset back to default colors\") print(Style.BOLD + Fore.CYAN + \"Bold cyan text\" + Style.RESET) print(Style.INVERT + \"Foreground and background colors inverted\" + Style.RESET) print(Fore.EightBit(208) + \"Color value '208' from the 256-color palette\" + Style.RESET) print(Fore.TwentyFourBit((164, 43, 202)) + \"Purple text from RGB value\" + Style.RESET) print(Fore.TwentyFourBit('#f7346e') + \"Pink-red text from HEX value\" + Style.RESET) print(Style.BOLD + Style.UNDERLINE + Fore.TwentyFourBit((47, 237, 202)) + Back.TwentyFourBit((138, 92, 92)) + \"Bold underlined teal text on a red-gray background\" + Style.RESET) ![demo-color.png](../images/demo-color.png \"demo-color.py\") demo-color-4-bit.py Click to expand from pyco import * print(Fore.BLACK + \"Fore.BLACK \" + \"\\t\\t\" + Fore.BRIGHT_BLACK + \"Fore.BRIGHT_BLACK \" + Style.RESET) print(Fore.RED + \"Fore.RED \" + \"\\t\\t\" + Fore.BRIGHT_RED + \"Fore.BRIGHT_RED \" + Style.RESET) print(Fore.GREEN + \"Fore.GREEN \" + \"\\t\\t\" + Fore.BRIGHT_GREEN + \"Fore.BRIGHT_GREEN \" + Style.RESET) print(Fore.YELLOW + \"Fore.YELLOW \" + \"\\t\\t\" + Fore.BRIGHT_YELLOW + \"Fore.BRIGHT_YELLOW \" + Style.RESET) print(Fore.BLUE + \"Fore.BLUE \" + \"\\t\\t\" + Fore.BRIGHT_BLUE + \"Fore.BRIGHT_BLUE \" + Style.RESET) print(Fore.MAGENTA + \"Fore.MAGENTA\" + \"\\t\\t\" + Fore.BRIGHT_MAGENTA + \"Fore.BRIGHT_MAGENTA\" + Style.RESET) print(Fore.CYAN + \"Fore.CYAN \" + \"\\t\\t\" + Fore.BRIGHT_CYAN + \"Fore.BRIGHT_CYAN \" + Style.RESET) print(Fore.WHITE + \"Fore.WHITE \" + \"\\t\\t\" + Fore.BRIGHT_WHITE + \"Fore.BRIGHT_WHITE \" + Style.RESET) print(Fore.DEFAULT + \"Fore.DEFAULT\" + Style.RESET) print() print(Back.BLACK + \"Back.BLACK \" + \"\\t\\t\" + Back.BRIGHT_BLACK + \"Back.BRIGHT_BLACK \" + Style.RESET) print(Back.RED + \"Back.RED \" + \"\\t\\t\" + Back.BRIGHT_RED + \"Back.BRIGHT_RED \" + Style.RESET) print(Back.GREEN + \"Back.GREEN \" + \"\\t\\t\" + Back.BRIGHT_GREEN + \"Back.BRIGHT_GREEN \" + Style.RESET) print(Back.YELLOW + \"Back.YELLOW \" + \"\\t\\t\" + Back.BRIGHT_YELLOW + \"Back.BRIGHT_YELLOW \" + Style.RESET) print(Back.BLUE + \"Back.BLUE \" + \"\\t\\t\" + Back.BRIGHT_BLUE + \"Back.BRIGHT_BLUE \" + Style.RESET) print(Back.MAGENTA + \"Back.MAGENTA\" + \"\\t\\t\" + Back.BRIGHT_MAGENTA + \"Back.BRIGHT_MAGENTA\" + Style.RESET) print(Back.CYAN + \"Back.CYAN \" + \"\\t\\t\" + Back.BRIGHT_CYAN + \"Back.BRIGHT_CYAN \" + Style.RESET) print(Back.WHITE + \"Back.WHITE \" + \"\\t\\t\" + Back.BRIGHT_WHITE + \"Back.BRIGHT_WHITE \" + Style.RESET) print(Back.DEFAULT + \"Back.DEFAULT\" + Style.RESET) ![demo-color-4-bit.png](../images/demo-color-4-bit.png \"demo-color-4-bit.py\") demo-color-8-bit.py Click to expand from pyco import * for code in range(256): print(f\"{Fore.EightBit(code)} {str(code).ljust(4)}\", end='') if code % 16 == 15: print(Style.RESET) print() for code in range(256): print(f\"{Back.EightBit(code)} {str(code).ljust(4)}\", end='') if code % 16 == 15: print(Style.RESET) ![demo-color-8-bit.png](../images/demo-color-8-bit.png \"demo-color-8-bit.py\")","title":"Color"},{"location":"api/color/#color","text":"Color escape code constants and functions. You can combine constants when using them in [ print_message() ] or [ user_input() ], or in other output functions.","title":"Color"},{"location":"api/color/#4-bit-colors","text":"The original ANSI escape codes for 16 colors (8 normal and 8 bright) can be found as constants under both Color.Fore and Color.Back classes. The precise RGB values for each of the constants will vary depending on the terminal.","title":"4-Bit Colors"},{"location":"api/color/#constants","text":"Constant Description BLACK Black RED Red GREEN Green YELLOW Yellow BLUE Blue MAGENTA Magenta CYAN Cyan WHITE Gray BRIGHT_BLACK Bright black/dark gray BRIGHT_RED Bright red BRIGHT_GREEN Bright green BRIGHT_YELLOW Bright yellow BRIGHT_BLUE Bright blue BRIGHT_MAGENTA Bright magenta BRIGHT_CYAN Bright cyan BRIGHT_WHITE Bright white DEFAULT Default, usually WHITE","title":"Constants"},{"location":"api/color/#8-bit-colors","text":"Most terminals support a palette of 256 colors, accessible with the eight_bit() function. For a detailed list of colors see https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit . eight_bit() takes one parameter which is the number of the color from 0 to 255 .","title":"8-Bit Colors"},{"location":"api/color/#24-bit-colors","text":"Some terminals support standard RGB values such as (53, 174, 89) . The rgb() and hex() functions allow you to set the foreground or background color from an RGB tuple or HEX string respectively.","title":"24-Bit Colors"},{"location":"api/color/#styles","text":"Style modifiers to change the look of the text.","title":"Styles"},{"location":"api/color/#constants_1","text":"Constant Description RESET Reset all color and style values to their default values BOLD Bold text, interpreted as \"bright color\" on some terminals DIM Dark text, not supported on some terminals ITALIC Italicized text, not supported on some terminals UNDERLNE Underlined text SLOW_BLINK Slowly blinking text, not supported on some terminals FAST_BLINK Fast blinking text, not supported on some terminals INVERT Invert the foreground and background colors STRIKE Striked out text, not supported on some terminals DOUBLE_UNDERLINE Doubly underlined text, interpreted as \"not bold\" on some terminals NORMAL Reset all style values to their default values NO_UNDERLINE Not underlined text NO_INVERT Foreground and background colors not inverted","title":"Constants"},{"location":"api/color/#defaults","text":"You can change the default colors used in [ print_message() ] and [ user_input() ] by assigning variables in the Color class to a constant of your choice. Constant Default Value Description DEFAULT_MESSAGE_COLOR Color.Fore.WHITE Default color for message text DEFAULT_PREFIX_COLOR Color.Fore.WHITE Default color for normal prefix text DEFAULT_INPUT_COLOR Color.Fore.WHITE Default color for user input text ERROR Color.Fore.BRIGHT_RED Default color for error prefixes WARNING Color.Fore.BRIGHT_YELLOW Default color for warning prefixes SUCCESS Color.Fore.BRIGHT_GREEN Default color for success prefixes INFO Color.Fore.WHITE Default color for info prefixes","title":"Defaults"},{"location":"api/color/#examples","text":"","title":"Examples"},{"location":"api/color/#demo-colorpy","text":"Click to expand from pyco import * print(Fore.DEFAULT + Back.DEFAULT + \"Plain text with default colors\" + Style.RESET) print(Fore.RED + Back.BRIGHT_YELLOW + \"Dark red text on a bright yellow background\" + Style.RESET) print(Fore.BRIGHT_GREEN + \"Bright green text\") print(\"Text is still bright green\" + Style.RESET) print(\"Reset back to default colors\") print(Style.BOLD + Fore.CYAN + \"Bold cyan text\" + Style.RESET) print(Style.INVERT + \"Foreground and background colors inverted\" + Style.RESET) print(Fore.EightBit(208) + \"Color value '208' from the 256-color palette\" + Style.RESET) print(Fore.TwentyFourBit((164, 43, 202)) + \"Purple text from RGB value\" + Style.RESET) print(Fore.TwentyFourBit('#f7346e') + \"Pink-red text from HEX value\" + Style.RESET) print(Style.BOLD + Style.UNDERLINE + Fore.TwentyFourBit((47, 237, 202)) + Back.TwentyFourBit((138, 92, 92)) + \"Bold underlined teal text on a red-gray background\" + Style.RESET) ![demo-color.png](../images/demo-color.png \"demo-color.py\")","title":"demo-color.py"},{"location":"api/color/#demo-color-4-bitpy","text":"Click to expand from pyco import * print(Fore.BLACK + \"Fore.BLACK \" + \"\\t\\t\" + Fore.BRIGHT_BLACK + \"Fore.BRIGHT_BLACK \" + Style.RESET) print(Fore.RED + \"Fore.RED \" + \"\\t\\t\" + Fore.BRIGHT_RED + \"Fore.BRIGHT_RED \" + Style.RESET) print(Fore.GREEN + \"Fore.GREEN \" + \"\\t\\t\" + Fore.BRIGHT_GREEN + \"Fore.BRIGHT_GREEN \" + Style.RESET) print(Fore.YELLOW + \"Fore.YELLOW \" + \"\\t\\t\" + Fore.BRIGHT_YELLOW + \"Fore.BRIGHT_YELLOW \" + Style.RESET) print(Fore.BLUE + \"Fore.BLUE \" + \"\\t\\t\" + Fore.BRIGHT_BLUE + \"Fore.BRIGHT_BLUE \" + Style.RESET) print(Fore.MAGENTA + \"Fore.MAGENTA\" + \"\\t\\t\" + Fore.BRIGHT_MAGENTA + \"Fore.BRIGHT_MAGENTA\" + Style.RESET) print(Fore.CYAN + \"Fore.CYAN \" + \"\\t\\t\" + Fore.BRIGHT_CYAN + \"Fore.BRIGHT_CYAN \" + Style.RESET) print(Fore.WHITE + \"Fore.WHITE \" + \"\\t\\t\" + Fore.BRIGHT_WHITE + \"Fore.BRIGHT_WHITE \" + Style.RESET) print(Fore.DEFAULT + \"Fore.DEFAULT\" + Style.RESET) print() print(Back.BLACK + \"Back.BLACK \" + \"\\t\\t\" + Back.BRIGHT_BLACK + \"Back.BRIGHT_BLACK \" + Style.RESET) print(Back.RED + \"Back.RED \" + \"\\t\\t\" + Back.BRIGHT_RED + \"Back.BRIGHT_RED \" + Style.RESET) print(Back.GREEN + \"Back.GREEN \" + \"\\t\\t\" + Back.BRIGHT_GREEN + \"Back.BRIGHT_GREEN \" + Style.RESET) print(Back.YELLOW + \"Back.YELLOW \" + \"\\t\\t\" + Back.BRIGHT_YELLOW + \"Back.BRIGHT_YELLOW \" + Style.RESET) print(Back.BLUE + \"Back.BLUE \" + \"\\t\\t\" + Back.BRIGHT_BLUE + \"Back.BRIGHT_BLUE \" + Style.RESET) print(Back.MAGENTA + \"Back.MAGENTA\" + \"\\t\\t\" + Back.BRIGHT_MAGENTA + \"Back.BRIGHT_MAGENTA\" + Style.RESET) print(Back.CYAN + \"Back.CYAN \" + \"\\t\\t\" + Back.BRIGHT_CYAN + \"Back.BRIGHT_CYAN \" + Style.RESET) print(Back.WHITE + \"Back.WHITE \" + \"\\t\\t\" + Back.BRIGHT_WHITE + \"Back.BRIGHT_WHITE \" + Style.RESET) print(Back.DEFAULT + \"Back.DEFAULT\" + Style.RESET) ![demo-color-4-bit.png](../images/demo-color-4-bit.png \"demo-color-4-bit.py\")","title":"demo-color-4-bit.py"},{"location":"api/color/#demo-color-8-bitpy","text":"Click to expand from pyco import * for code in range(256): print(f\"{Fore.EightBit(code)} {str(code).ljust(4)}\", end='') if code % 16 == 15: print(Style.RESET) print() for code in range(256): print(f\"{Back.EightBit(code)} {str(code).ljust(4)}\", end='') if code % 16 == 15: print(Style.RESET) ![demo-color-8-bit.png](../images/demo-color-8-bit.png \"demo-color-8-bit.py\")","title":"demo-color-8-bit.py"},{"location":"api/constants/","text":"Constants","title":"Constants"},{"location":"api/constants/#constants","text":"","title":"Constants"},{"location":"api/cursor/","text":"Cursor Functions for modifying cursor parameters and position. up(n: int) Move the cursor up n number of characters. Parameter Type Default Value Description n int 1 Number of characters to move up down(n: int) Move the cursor down n number of characters. Parameter Type Default Value Description n int 1 Number of characters to move down right(n: int) Move the cursor right n number of characters. Parameter Type Default Value Description n int 1 Number of characters to move right left(n: int) Move the cursor left n number of characters. Parameter Type Default Value Description n int 1 Number of characters to move left line_up(n: int) Move the cursor up n number of lines. Parameter Type Default Value Description n int 1 Number of lines to move up line_down(n: int) Move the cursor down n number of lines. Parameter Type Default Value Description n int 1 Number of lines to move down horizontal(x: int) Move the cursor to column x . Parameter Type Default Value Description x int 0 Absolute X position vertical(y: int) Move the cursor to row y . Parameter Type Default Value Description y int 0 Absolute Y position set_position(x: int, y: int) Move the cursor to column x and line y . Parameter Type Default Value Description x int 0 Absolute X position y int 0 Absolute Y position get_position() Gets the current cursor position by switching to an alternate buffer and reading the position output. Returns an integer tuple (x, y) . save_position() Save the current cursor position in memory to restore later. restore_position() Restore the cursor position to the last saved position. Defaults to position 0, 0 if no position was saved. show() Make the terminal cursor visible. hide() Make the terminal cursor invisible. enable_blink() Make the terminal cursor start blinking. disable_blink() Make the terminal cursor stop blinking. Example Click to expand from pyco import * import this from time import sleep print(Fore.BRIGHT_GREEN, end='', flush=True) sleep(2) Cursor.LineUp(5) sleep(0.5) print(\"Up 5 lines\", end='', flush=True) sleep(0.5) Cursor.Right(5) sleep(0.5) print(\"Right 5 characters\", end='', flush=True) sleep(0.5) Cursor.Up(1) sleep(0.5) print(\"Up 1 character\", end='', flush=True) sleep(0.5) Cursor.Down(2) sleep(0.5) print(\"Down 2 characters\", end='', flush=True) sleep(0.5) Cursor.Left(50) sleep(0.5) print(\"Left 50 characters\", end='', flush=True) sleep(0.5) Cursor.LineUp(9) sleep(0.5) print(\"Up 9 lines \", end='', flush=True) sleep(0.5) Cursor.SavePosition() sleep(0.5) print(\"Saved position\", end='', flush=True) sleep(0.5) Cursor.LineDown(2) sleep(0.5) print(\"Down 2 lines\", end='', flush=True) sleep(0.5) Cursor.Horizontal(28) sleep(0.5) print(\"X position 28\", end='', flush=True) sleep(0.5) Cursor.Vertical(8) sleep(0.5) print(\"Y position 8\", end='', flush=True) sleep(0.5) Cursor.SetPosition(11, 2) sleep(0.5) print(\"X position 11, Y position 2\", flush=True) sleep(0.5) Cursor.Hide() sleep(0.5) print(\"Cursor hidden\", flush=True) sleep(2) Cursor.Show() sleep(0.5) print(\"Cursor visible\", flush=True) sleep(2) Cursor.DisableBlink() sleep(0.5) print(\"Cursor blink disabled\", flush=True) sleep(2) Cursor.EnableBlink() sleep(0.5) print(\"Cursor blink enabled\", flush=True) sleep(2) print(f\"Cursor position is: {cursor.get_position()}\", flush=True) sleep(0.5) Cursor.RestorePosition() sleep(0.5) print(\"Cursor position restored to previous saved position\", flush=True) ![demo-cursor.gif](../images/demo-cursor.gif \"demo-cursor.py\")","title":"Cursor"},{"location":"api/cursor/#cursor","text":"Functions for modifying cursor parameters and position.","title":"Cursor"},{"location":"api/cursor/#upn-int","text":"Move the cursor up n number of characters. Parameter Type Default Value Description n int 1 Number of characters to move up","title":"up(n: int)"},{"location":"api/cursor/#downn-int","text":"Move the cursor down n number of characters. Parameter Type Default Value Description n int 1 Number of characters to move down","title":"down(n: int)"},{"location":"api/cursor/#rightn-int","text":"Move the cursor right n number of characters. Parameter Type Default Value Description n int 1 Number of characters to move right","title":"right(n: int)"},{"location":"api/cursor/#leftn-int","text":"Move the cursor left n number of characters. Parameter Type Default Value Description n int 1 Number of characters to move left","title":"left(n: int)"},{"location":"api/cursor/#line_upn-int","text":"Move the cursor up n number of lines. Parameter Type Default Value Description n int 1 Number of lines to move up","title":"line_up(n: int)"},{"location":"api/cursor/#line_downn-int","text":"Move the cursor down n number of lines. Parameter Type Default Value Description n int 1 Number of lines to move down","title":"line_down(n: int)"},{"location":"api/cursor/#horizontalx-int","text":"Move the cursor to column x . Parameter Type Default Value Description x int 0 Absolute X position","title":"horizontal(x: int)"},{"location":"api/cursor/#verticaly-int","text":"Move the cursor to row y . Parameter Type Default Value Description y int 0 Absolute Y position","title":"vertical(y: int)"},{"location":"api/cursor/#set_positionx-int-y-int","text":"Move the cursor to column x and line y . Parameter Type Default Value Description x int 0 Absolute X position y int 0 Absolute Y position","title":"set_position(x: int, y: int)"},{"location":"api/cursor/#get_position","text":"Gets the current cursor position by switching to an alternate buffer and reading the position output. Returns an integer tuple (x, y) .","title":"get_position()"},{"location":"api/cursor/#save_position","text":"Save the current cursor position in memory to restore later.","title":"save_position()"},{"location":"api/cursor/#restore_position","text":"Restore the cursor position to the last saved position. Defaults to position 0, 0 if no position was saved.","title":"restore_position()"},{"location":"api/cursor/#show","text":"Make the terminal cursor visible.","title":"show()"},{"location":"api/cursor/#hide","text":"Make the terminal cursor invisible.","title":"hide()"},{"location":"api/cursor/#enable_blink","text":"Make the terminal cursor start blinking.","title":"enable_blink()"},{"location":"api/cursor/#disable_blink","text":"Make the terminal cursor stop blinking.","title":"disable_blink()"},{"location":"api/cursor/#example","text":"Click to expand from pyco import * import this from time import sleep print(Fore.BRIGHT_GREEN, end='', flush=True) sleep(2) Cursor.LineUp(5) sleep(0.5) print(\"Up 5 lines\", end='', flush=True) sleep(0.5) Cursor.Right(5) sleep(0.5) print(\"Right 5 characters\", end='', flush=True) sleep(0.5) Cursor.Up(1) sleep(0.5) print(\"Up 1 character\", end='', flush=True) sleep(0.5) Cursor.Down(2) sleep(0.5) print(\"Down 2 characters\", end='', flush=True) sleep(0.5) Cursor.Left(50) sleep(0.5) print(\"Left 50 characters\", end='', flush=True) sleep(0.5) Cursor.LineUp(9) sleep(0.5) print(\"Up 9 lines \", end='', flush=True) sleep(0.5) Cursor.SavePosition() sleep(0.5) print(\"Saved position\", end='', flush=True) sleep(0.5) Cursor.LineDown(2) sleep(0.5) print(\"Down 2 lines\", end='', flush=True) sleep(0.5) Cursor.Horizontal(28) sleep(0.5) print(\"X position 28\", end='', flush=True) sleep(0.5) Cursor.Vertical(8) sleep(0.5) print(\"Y position 8\", end='', flush=True) sleep(0.5) Cursor.SetPosition(11, 2) sleep(0.5) print(\"X position 11, Y position 2\", flush=True) sleep(0.5) Cursor.Hide() sleep(0.5) print(\"Cursor hidden\", flush=True) sleep(2) Cursor.Show() sleep(0.5) print(\"Cursor visible\", flush=True) sleep(2) Cursor.DisableBlink() sleep(0.5) print(\"Cursor blink disabled\", flush=True) sleep(2) Cursor.EnableBlink() sleep(0.5) print(\"Cursor blink enabled\", flush=True) sleep(2) print(f\"Cursor position is: {cursor.get_position()}\", flush=True) sleep(0.5) Cursor.RestorePosition() sleep(0.5) print(\"Cursor position restored to previous saved position\", flush=True) ![demo-cursor.gif](../images/demo-cursor.gif \"demo-cursor.py\")","title":"Example"},{"location":"api/io/","text":"Terminal Printing and Input Printing Messages Print messages in the terminal with customizable colors and prefixes using print_message() . Use this function instead of Python's built-in print() . Prefixes are automatically enclosed in square brackets. Certain prefixes are automatically highlighted according to constants in the Color class. You may override preset colors. Prefixes Prefix Constant Default Color ERROR Color.ERROR Color.Fore.BRIGHT_RED WARNING Color.WARNING Color.Fore.BRIGHT_YELLOW SUCCESS Color.SUCCESS Color.Fore.BRIGHT_GREEN INFO Color.INFO Color.Fore.WHITE Parameters Parameter Type Default Value Description message str '' The message you want to print in the console prefix str\\|None None The prefix before the message message_color Color Color.AUTO The color of the message. If AUTO , it will use Color.DEFAULT_MESSAGE_COLOR prefix_color Color Color.AUTO The color of the prefix. If AUTO , it will color according to the prefix. color_brackets bool False Specify whether to color the brackets surrounding the prefix or not log bool\\|None None Log the message in the log file. If None , it will log according to Logger.enableMessageLogging and Logger.logLevel sep str ' ' Separator, directly passed to print() end str \\n String to print at the end, directly passed to print() flush bool False Flush the output buffer to show changes immediately, directly passed to print() Example Click to expand from pyco import * print_message(\"This is a normal message\") print_message(\"This is an error message\", prefix=\"ERROR\") print_message(\"This is a warning message\", prefix=\"WARNING\") print_message(\"This is a success message\", prefix=\"SUCCESS\") print_message(\"This is an info message\", prefix=\"INFO\") print_message(\"Automatic prefix highlighting is case insensitive\", \"Success\") print_message(\"This is a message with a custom prefix\", prefix=\"Custom Prefix\") print_message(\"This is a message with a custom color\", messageColor=Color.Fore.BRIGHT_CYAN) print_message(\"You can combine custom prefixes and colors\", prefix=\"Example\", prefixColor=Color.Fore.BRIGHT_MAGENTA) print_message(\"You can even override preset message colors\", prefix=\"ERROR\", prefixColor=Color.Fore.BRIGHT_GREEN) print_message(\"You can set the colors for the message and prefix separately\", prefix=\"Example\", messageColor=Color.Fore.RED, prefixColor=Color.Fore.YELLOW) print_message(\"For even more customizability, you can choose whether to color only the prefix,\", prefix=\"INFO\", prefixColor=Color.Fore.BRIGHT_BLUE) print_message(\"Or the brackets as well\", prefix=\"INFO\", prefixColor=Color.Fore.BRIGHT_BLUE, colorBrackets=True) print_message(\"This message has been logged in the log file\", prefix=\"INFO\", log=True) ![demo-print-message.png](../images/demo-print-message.png \"demo-print-message.py\") User Input Get user input from the terminal with colors using user_input() . Use this function instead of Python's built-in input() . Parameters Parameter Type Default Value Description prefix str '' The prompt before the user's input prefix_color Color Color.DEFAULT_PREFIX_COLOR The color of the prefix input_color Color Color.DEFAULT_INPUT_COLOR The color of the user's input log bool\\|None None Log the prompt and input in the log file. If None , it will log according to Logger.enableInputLogging Example Click to expand from pyco import * user_input(\"Plain prompt: \") user_input(\"Prompt in green: \", Fore.GREEN) user_input(\"Prompt in bright red, user input in cyan: \", Fore.BRIGHT_RED, Fore.CYAN) user_input(\"Prompt in blue on a bright white background, user input in bright magenta with an underline: \", Fore.BLUE + Back.BRIGHT_WHITE, Fore.BRIGHT_MAGENTA + Style.UNDERLINE) user_input(\"This prompt and following user input has been logged: \", log=True) ![demo-user-input.png](../images/demo-user-input.png \"demo-user-input.py\")","title":"Terminal Printing and Input"},{"location":"api/io/#terminal-printing-and-input","text":"","title":"Terminal Printing and Input"},{"location":"api/io/#printing-messages","text":"Print messages in the terminal with customizable colors and prefixes using print_message() . Use this function instead of Python's built-in print() . Prefixes are automatically enclosed in square brackets. Certain prefixes are automatically highlighted according to constants in the Color class. You may override preset colors.","title":"Printing Messages"},{"location":"api/io/#prefixes","text":"Prefix Constant Default Color ERROR Color.ERROR Color.Fore.BRIGHT_RED WARNING Color.WARNING Color.Fore.BRIGHT_YELLOW SUCCESS Color.SUCCESS Color.Fore.BRIGHT_GREEN INFO Color.INFO Color.Fore.WHITE","title":"Prefixes"},{"location":"api/io/#parameters","text":"Parameter Type Default Value Description message str '' The message you want to print in the console prefix str\\|None None The prefix before the message message_color Color Color.AUTO The color of the message. If AUTO , it will use Color.DEFAULT_MESSAGE_COLOR prefix_color Color Color.AUTO The color of the prefix. If AUTO , it will color according to the prefix. color_brackets bool False Specify whether to color the brackets surrounding the prefix or not log bool\\|None None Log the message in the log file. If None , it will log according to Logger.enableMessageLogging and Logger.logLevel sep str ' ' Separator, directly passed to print() end str \\n String to print at the end, directly passed to print() flush bool False Flush the output buffer to show changes immediately, directly passed to print()","title":"Parameters"},{"location":"api/io/#example","text":"Click to expand from pyco import * print_message(\"This is a normal message\") print_message(\"This is an error message\", prefix=\"ERROR\") print_message(\"This is a warning message\", prefix=\"WARNING\") print_message(\"This is a success message\", prefix=\"SUCCESS\") print_message(\"This is an info message\", prefix=\"INFO\") print_message(\"Automatic prefix highlighting is case insensitive\", \"Success\") print_message(\"This is a message with a custom prefix\", prefix=\"Custom Prefix\") print_message(\"This is a message with a custom color\", messageColor=Color.Fore.BRIGHT_CYAN) print_message(\"You can combine custom prefixes and colors\", prefix=\"Example\", prefixColor=Color.Fore.BRIGHT_MAGENTA) print_message(\"You can even override preset message colors\", prefix=\"ERROR\", prefixColor=Color.Fore.BRIGHT_GREEN) print_message(\"You can set the colors for the message and prefix separately\", prefix=\"Example\", messageColor=Color.Fore.RED, prefixColor=Color.Fore.YELLOW) print_message(\"For even more customizability, you can choose whether to color only the prefix,\", prefix=\"INFO\", prefixColor=Color.Fore.BRIGHT_BLUE) print_message(\"Or the brackets as well\", prefix=\"INFO\", prefixColor=Color.Fore.BRIGHT_BLUE, colorBrackets=True) print_message(\"This message has been logged in the log file\", prefix=\"INFO\", log=True) ![demo-print-message.png](../images/demo-print-message.png \"demo-print-message.py\")","title":"Example"},{"location":"api/io/#user-input","text":"Get user input from the terminal with colors using user_input() . Use this function instead of Python's built-in input() .","title":"User Input"},{"location":"api/io/#parameters_1","text":"Parameter Type Default Value Description prefix str '' The prompt before the user's input prefix_color Color Color.DEFAULT_PREFIX_COLOR The color of the prefix input_color Color Color.DEFAULT_INPUT_COLOR The color of the user's input log bool\\|None None Log the prompt and input in the log file. If None , it will log according to Logger.enableInputLogging","title":"Parameters"},{"location":"api/io/#example_1","text":"Click to expand from pyco import * user_input(\"Plain prompt: \") user_input(\"Prompt in green: \", Fore.GREEN) user_input(\"Prompt in bright red, user input in cyan: \", Fore.BRIGHT_RED, Fore.CYAN) user_input(\"Prompt in blue on a bright white background, user input in bright magenta with an underline: \", Fore.BLUE + Back.BRIGHT_WHITE, Fore.BRIGHT_MAGENTA + Style.UNDERLINE) user_input(\"This prompt and following user input has been logged: \", log=True) ![demo-user-input.png](../images/demo-user-input.png \"demo-user-input.py\")","title":"Example"},{"location":"api/logging/","text":"Logging The logging module contains methods and constants for logging entries into a log file. The logger is integrated with [ print_message() ] and [ user_input() ]. Variables Change these variables at the start of your script to alter the behavior of the logger. Variable Type Default Value Description log_path str '<cwd>/logs/log.txt' Full path of a text file to log entries into enable_message_logging bool False Enable or disable logging of messages enable_input_logging bool False Enable or disable logging of user inputs enable_timestamp bool True Enable or disable timestamps in log entries timestamp_format str '%Y-%m-%d %H:%M:%S%z' Timestamp format as a datetime.datetime.strftime() format string log_level int Level.ERROR Log level Logging Messages Use log() to log a message into the log file specified by log_path . Parameter Type Default Value Description message str '' The message of the log entry prefix str '' The prefix before the message Set Log Level set_log_level(level: Level) Set the log level using a constant from the Level class, or a string or integer corresponding to a constant in the Level class. You can also simply set the log_level variable to the desired value. Parameter Type Description level Level\\|int\\|str Log level from the Level class Clear Log clear_log() Clear the contents of the log file. The log file does not get deleted. Log Levels Level Value Description Level.NONE 0 Dont log any messages Level.ERROR 1 Log errors Level.WARNING 2 Log warnings and errors Level.SUCCESS 3 Log successes, warnings, and errors Level.INFO 4 Log info, successes, warnings, and errors Level.ALL 5 Log everything Example Click to expand ### `demo-logging.py` from pyco import * Logger.ClearLog() Logger.enableMessageLogging = True Logger.Log(\"Log file gets created automatically\", \"[Prefix]\") print_message(\"Error messages logged by default\", \"[ERROR]\") Logger.Log(\"Log entry without a prefix\") Logger.enableInputLogging = True user_input(\"Input logging enabled: \") Logger.SetLogLevel(Logger.Level.ALL) print_message(\"Log level set to 'ALL'\", \"[Prefix]\") ### `log.txt` [2021-05-13 00:21:29-0000] [INFO] Cleared log file contents [2021-05-13 00:21:29-0000] [Prefix] Log file gets created automatically [2021-05-13 00:21:29-0000] [ERROR] Error messages logged by default [2021-05-13 00:21:29-0000] Log entry without a prefix [2021-05-13 00:21:30-0000] Input logging enabled: input [2021-05-13 00:21:30-0000] [Prefix] Log level set to 'ALL'","title":"Logging"},{"location":"api/logging/#logging","text":"The logging module contains methods and constants for logging entries into a log file. The logger is integrated with [ print_message() ] and [ user_input() ].","title":"Logging"},{"location":"api/logging/#variables","text":"Change these variables at the start of your script to alter the behavior of the logger. Variable Type Default Value Description log_path str '<cwd>/logs/log.txt' Full path of a text file to log entries into enable_message_logging bool False Enable or disable logging of messages enable_input_logging bool False Enable or disable logging of user inputs enable_timestamp bool True Enable or disable timestamps in log entries timestamp_format str '%Y-%m-%d %H:%M:%S%z' Timestamp format as a datetime.datetime.strftime() format string log_level int Level.ERROR Log level","title":"Variables"},{"location":"api/logging/#logging-messages","text":"Use log() to log a message into the log file specified by log_path . Parameter Type Default Value Description message str '' The message of the log entry prefix str '' The prefix before the message","title":"Logging Messages"},{"location":"api/logging/#set-log-level","text":"set_log_level(level: Level) Set the log level using a constant from the Level class, or a string or integer corresponding to a constant in the Level class. You can also simply set the log_level variable to the desired value. Parameter Type Description level Level\\|int\\|str Log level from the Level class","title":"Set Log Level"},{"location":"api/logging/#clear-log","text":"clear_log() Clear the contents of the log file. The log file does not get deleted.","title":"Clear Log"},{"location":"api/logging/#log-levels","text":"Level Value Description Level.NONE 0 Dont log any messages Level.ERROR 1 Log errors Level.WARNING 2 Log warnings and errors Level.SUCCESS 3 Log successes, warnings, and errors Level.INFO 4 Log info, successes, warnings, and errors Level.ALL 5 Log everything","title":"Log Levels"},{"location":"api/logging/#example","text":"Click to expand ### `demo-logging.py` from pyco import * Logger.ClearLog() Logger.enableMessageLogging = True Logger.Log(\"Log file gets created automatically\", \"[Prefix]\") print_message(\"Error messages logged by default\", \"[ERROR]\") Logger.Log(\"Log entry without a prefix\") Logger.enableInputLogging = True user_input(\"Input logging enabled: \") Logger.SetLogLevel(Logger.Level.ALL) print_message(\"Log level set to 'ALL'\", \"[Prefix]\") ### `log.txt` [2021-05-13 00:21:29-0000] [INFO] Cleared log file contents [2021-05-13 00:21:29-0000] [Prefix] Log file gets created automatically [2021-05-13 00:21:29-0000] [ERROR] Error messages logged by default [2021-05-13 00:21:29-0000] Log entry without a prefix [2021-05-13 00:21:30-0000] Input logging enabled: input [2021-05-13 00:21:30-0000] [Prefix] Log level set to 'ALL'","title":"Example"},{"location":"api/prefix/","text":"Prefixes Pyco includes several predefined prefix constants to use in [ print_message() ]. You can create your own prefixes at runtime using constants from the color module, or even customize the default prefixes. Constants Constant Description ERROR Error WARNING Warning SUCCESS Success INFO Info","title":"Prefixes"},{"location":"api/prefix/#prefixes","text":"Pyco includes several predefined prefix constants to use in [ print_message() ]. You can create your own prefixes at runtime using constants from the color module, or even customize the default prefixes.","title":"Prefixes"},{"location":"api/prefix/#constants","text":"Constant Description ERROR Error WARNING Warning SUCCESS Success INFO Info","title":"Constants"},{"location":"api/progress/","text":"Progress Bars Show progress bars in the terminal with the ProgressBar class. Create an instance with any desired arguments, then use the update() method to update the progress bar in a loop where your progress happens. If less time has passed than the number of milliseconds in update_interval , the progress bar will not update to avoid slowing down your code with large numbers of terminal output calls. Create Instance progress.ProgressBar(iteration: int, total: int, prefix: str, suffix: str, length: int, fill: str, empty_fill: str, decimals: int, end: str, update_interval: int) Parameters Parameter Type Default Value Description iteration int 0 Iteration of the progress bar (how full it is) total int 50 Total number of iterations in the progress bar prefix str '' Prefix before the progress bar suffix str '' Suffix after the progress bar length int 50 Number of characters in the progress bar fill str '\u2588' Character to fill the progress bar with empty_fill str '-' Character to fill the empty part of the progress bar with decimals int 1 Number of decimals to show in the percent end str '\\r' Character(s) to print at the end update_interval int 100 Interval after which to update the progress bar in milliseconds Update ProgressBar.update(iteration: int, force: bool, **kwargs) Parameters Parameter Type Default Value Description iteration int\\|None None Iteration of the progress bar (how full it is) force bool False Force the progress bar to be updated regardless of update_interval All arguments specified when creating an instance can also be changed in the update() function. Example Click to expand from pyco import * import time bar = ProgressBar(prefix=\"Example progress bar\") for i in range(101): bar.Update(i) time.sleep(0.1) ![demo-progress-bar.gif](../images/demo-progress-bar.gif \"demo-progress-bar.py\")","title":"Progress Bars"},{"location":"api/progress/#progress-bars","text":"Show progress bars in the terminal with the ProgressBar class. Create an instance with any desired arguments, then use the update() method to update the progress bar in a loop where your progress happens. If less time has passed than the number of milliseconds in update_interval , the progress bar will not update to avoid slowing down your code with large numbers of terminal output calls.","title":"Progress Bars"},{"location":"api/progress/#create-instance","text":"progress.ProgressBar(iteration: int, total: int, prefix: str, suffix: str, length: int, fill: str, empty_fill: str, decimals: int, end: str, update_interval: int)","title":"Create Instance"},{"location":"api/progress/#parameters","text":"Parameter Type Default Value Description iteration int 0 Iteration of the progress bar (how full it is) total int 50 Total number of iterations in the progress bar prefix str '' Prefix before the progress bar suffix str '' Suffix after the progress bar length int 50 Number of characters in the progress bar fill str '\u2588' Character to fill the progress bar with empty_fill str '-' Character to fill the empty part of the progress bar with decimals int 1 Number of decimals to show in the percent end str '\\r' Character(s) to print at the end update_interval int 100 Interval after which to update the progress bar in milliseconds","title":"Parameters"},{"location":"api/progress/#update","text":"ProgressBar.update(iteration: int, force: bool, **kwargs)","title":"Update"},{"location":"api/progress/#parameters_1","text":"Parameter Type Default Value Description iteration int\\|None None Iteration of the progress bar (how full it is) force bool False Force the progress bar to be updated regardless of update_interval All arguments specified when creating an instance can also be changed in the update() function.","title":"Parameters"},{"location":"api/progress/#example","text":"Click to expand from pyco import * import time bar = ProgressBar(prefix=\"Example progress bar\") for i in range(101): bar.Update(i) time.sleep(0.1) ![demo-progress-bar.gif](../images/demo-progress-bar.gif \"demo-progress-bar.py\")","title":"Example"},{"location":"api/terminal/","text":"Terminal Functions for interacting with the terminal window. clear_screen(mode: int) Clear text in the terminal window. Note: Modes 2 and 3 may not work as expected on Windows. Parameter Type Default Value Description mode int 2 Which text to clear, relative to the cursor Options Value Description 0 Clear all text from the cursor to the end of the screen 1 Clear all text from the cursor to the beginning of the screen 2 Clear all text 3 Clear all text and delete all lines saved in the scrollback buffer clear_line(mode: int) Clear text on the current line. Cursor position does not change. Parameter Type Default Value Description mode int 2 Which text on the current line to clear, relative to the cursor Options Value Description 0 Clear all text from the cursor to the end of the line 1 Clear all text from the cursor to the beginning of the line 2 Clear the entire line scroll_up(n: int) Move the text up n number of lines. Parameter Type Default Value Description n int 1 Number of lines to move the text on screen up scroll_down(n: int) Move the text down n number of lines. Parameter Type Default Value Description n int 1 Number of lines to move the text on screen down set_window_title(title: str) Set the terminal window title. Parameter Type Description title str The window title width_80() Set the terminal width to 80 columns. width_132() Set the terminal window width to 132 columns. bell() Play a sound. main_screen_buffer() Switch to the main screen buffer. alt_screen_buffer() Switch to a new alternate screen buffer. This allows you to save the current terminal state, switch to a blank screen, then go back to the main screen using main_screen_buffer() . reset_all() Reset all terminal settings to their default values. Example Click to expand from pyco import * import this from time import sleep Terminal.SetWindowTitle(\"Pyco Demo\") sleep(0.5) Terminal.Bell() sleep(0.5) Terminal.ScrollUp() sleep(0.5) Terminal.ScrollDown() sleep(0.5) Cursor.LineUp(5) sleep(0.5) Cursor.Right(5) sleep(0.5) Terminal.ClearLine(0) sleep(0.5) Cursor.Up() sleep(0.5) Terminal.ClearLine(1) sleep(0.5) Cursor.Up() sleep(0.5) Terminal.ClearLine(2) sleep(0.5) Terminal.AltScreenBuffer() sleep(0.5) print(\"Text in the alternate screen buffer\") sleep(0.5) Terminal.MainScreenBuffer() sleep(0.5) print(\"Text in the main screen buffer\") sleep(0.5) Terminal.ClearScreen() ![demo-terminal.gif](../images/demo-terminal.gif \"demo-terminal.py\")","title":"Terminal"},{"location":"api/terminal/#terminal","text":"Functions for interacting with the terminal window.","title":"Terminal"},{"location":"api/terminal/#clear_screenmode-int","text":"Clear text in the terminal window. Note: Modes 2 and 3 may not work as expected on Windows. Parameter Type Default Value Description mode int 2 Which text to clear, relative to the cursor","title":"clear_screen(mode: int)"},{"location":"api/terminal/#options","text":"Value Description 0 Clear all text from the cursor to the end of the screen 1 Clear all text from the cursor to the beginning of the screen 2 Clear all text 3 Clear all text and delete all lines saved in the scrollback buffer","title":"Options"},{"location":"api/terminal/#clear_linemode-int","text":"Clear text on the current line. Cursor position does not change. Parameter Type Default Value Description mode int 2 Which text on the current line to clear, relative to the cursor","title":"clear_line(mode: int)"},{"location":"api/terminal/#options_1","text":"Value Description 0 Clear all text from the cursor to the end of the line 1 Clear all text from the cursor to the beginning of the line 2 Clear the entire line","title":"Options"},{"location":"api/terminal/#scroll_upn-int","text":"Move the text up n number of lines. Parameter Type Default Value Description n int 1 Number of lines to move the text on screen up","title":"scroll_up(n: int)"},{"location":"api/terminal/#scroll_downn-int","text":"Move the text down n number of lines. Parameter Type Default Value Description n int 1 Number of lines to move the text on screen down","title":"scroll_down(n: int)"},{"location":"api/terminal/#set_window_titletitle-str","text":"Set the terminal window title. Parameter Type Description title str The window title","title":"set_window_title(title: str)"},{"location":"api/terminal/#width_80","text":"Set the terminal width to 80 columns.","title":"width_80()"},{"location":"api/terminal/#width_132","text":"Set the terminal window width to 132 columns.","title":"width_132()"},{"location":"api/terminal/#bell","text":"Play a sound.","title":"bell()"},{"location":"api/terminal/#main_screen_buffer","text":"Switch to the main screen buffer.","title":"main_screen_buffer()"},{"location":"api/terminal/#alt_screen_buffer","text":"Switch to a new alternate screen buffer. This allows you to save the current terminal state, switch to a blank screen, then go back to the main screen using main_screen_buffer() .","title":"alt_screen_buffer()"},{"location":"api/terminal/#reset_all","text":"Reset all terminal settings to their default values.","title":"reset_all()"},{"location":"api/terminal/#example","text":"Click to expand from pyco import * import this from time import sleep Terminal.SetWindowTitle(\"Pyco Demo\") sleep(0.5) Terminal.Bell() sleep(0.5) Terminal.ScrollUp() sleep(0.5) Terminal.ScrollDown() sleep(0.5) Cursor.LineUp(5) sleep(0.5) Cursor.Right(5) sleep(0.5) Terminal.ClearLine(0) sleep(0.5) Cursor.Up() sleep(0.5) Terminal.ClearLine(1) sleep(0.5) Cursor.Up() sleep(0.5) Terminal.ClearLine(2) sleep(0.5) Terminal.AltScreenBuffer() sleep(0.5) print(\"Text in the alternate screen buffer\") sleep(0.5) Terminal.MainScreenBuffer() sleep(0.5) print(\"Text in the main screen buffer\") sleep(0.5) Terminal.ClearScreen() ![demo-terminal.gif](../images/demo-terminal.gif \"demo-terminal.py\")","title":"Example"},{"location":"api/text/","text":"Text Functions for modifying terminal text using escape codes. insert_char(n: int) Insert n spaces starting at the current cursor position. Parameter Type Default Value Description n int 1 Number of spaces to insert delete_char(n: int) Delete n characters starting at the current cursor position. Parameter Type Default Value Description n int 1 Number of characters to delete erase_char(n: int) Erase n characters starting at the current cursor position by overwriting them with a space character. Parameter Type Default Value Description n int 1 Number of characters to overwrite insert_line(n: int) Insert n lines starting at the current cursor position. Parameter Type Default Value Description n int 1 Number of lines to insert delete_line(n: int) Delete n lines starting from the cursor row. Parameter Type Default Value Description n int 1 Number of lines to delete char_set_ascii() Switch to the default ASCII character mode. char_set_line_drawing() Switch to the DEC line drawing character mode. When this mode is enabled, ASCII characters are mapped as follows: Click to expand ASCII|Line Drawing -----|------------ `j`|`\u2518` `k`|`\u2510` `l`|`\u250c` `m`|`\u2514` `n`|`\u253c` `q`|`\u2500` `t`|`\u251c` `u`|`\u2524` `v`|`\u2534` `w`|`\u252c` `x`|`\u2502` `a`|`\u2592` `f`|`\u00b0` `g`|`\u00b1` `y`|`\u2264` `z`|`\u2265` `{`|`\u03c0` `}`|`\u00a3` `\\|`|`\u2260` `` ` ``|``\u2666`` `~`|`\u00b7` Uppercase letters are unaffected. For a detailed description see https://docs.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences#designate-character-set . Example Click to expand from pyco import * import this from time import sleep Cursor.LineUp(3) sleep(0.5) Text.InsertChar(5) sleep(0.5) Cursor.LineUp() sleep(0.5) Text.DeleteChar(5) sleep(0.5) Cursor.LineUp() sleep(0.5) Text.EraseChar(5) sleep(0.5) Cursor.LineUp() sleep(0.5) Text.InsertLine() sleep(0.5) Cursor.LineUp(3) sleep(0.5) Text.DeleteLine() print(Fore.BRIGHT_GREEN) sleep(1) Text.CharSetLineDrawing() print(\"This text is printed with the Line Drawing character set\") sleep(1) print(\"j k l m n q t u v w x a f g y z { } | ` ~ \") sleep(1) Text.CharSetASCII() print(\"This text is printed with the default ASCII character set\") ![demo-text.gif](../images/demo-text.gif \"demo-text.py\")","title":"Text"},{"location":"api/text/#text","text":"Functions for modifying terminal text using escape codes.","title":"Text"},{"location":"api/text/#insert_charn-int","text":"Insert n spaces starting at the current cursor position. Parameter Type Default Value Description n int 1 Number of spaces to insert","title":"insert_char(n: int)"},{"location":"api/text/#delete_charn-int","text":"Delete n characters starting at the current cursor position. Parameter Type Default Value Description n int 1 Number of characters to delete","title":"delete_char(n: int)"},{"location":"api/text/#erase_charn-int","text":"Erase n characters starting at the current cursor position by overwriting them with a space character. Parameter Type Default Value Description n int 1 Number of characters to overwrite","title":"erase_char(n: int)"},{"location":"api/text/#insert_linen-int","text":"Insert n lines starting at the current cursor position. Parameter Type Default Value Description n int 1 Number of lines to insert","title":"insert_line(n: int)"},{"location":"api/text/#delete_linen-int","text":"Delete n lines starting from the cursor row. Parameter Type Default Value Description n int 1 Number of lines to delete","title":"delete_line(n: int)"},{"location":"api/text/#char_set_ascii","text":"Switch to the default ASCII character mode.","title":"char_set_ascii()"},{"location":"api/text/#char_set_line_drawing","text":"Switch to the DEC line drawing character mode. When this mode is enabled, ASCII characters are mapped as follows: Click to expand ASCII|Line Drawing -----|------------ `j`|`\u2518` `k`|`\u2510` `l`|`\u250c` `m`|`\u2514` `n`|`\u253c` `q`|`\u2500` `t`|`\u251c` `u`|`\u2524` `v`|`\u2534` `w`|`\u252c` `x`|`\u2502` `a`|`\u2592` `f`|`\u00b0` `g`|`\u00b1` `y`|`\u2264` `z`|`\u2265` `{`|`\u03c0` `}`|`\u00a3` `\\|`|`\u2260` `` ` ``|``\u2666`` `~`|`\u00b7` Uppercase letters are unaffected. For a detailed description see https://docs.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences#designate-character-set .","title":"char_set_line_drawing()"},{"location":"api/text/#example","text":"Click to expand from pyco import * import this from time import sleep Cursor.LineUp(3) sleep(0.5) Text.InsertChar(5) sleep(0.5) Cursor.LineUp() sleep(0.5) Text.DeleteChar(5) sleep(0.5) Cursor.LineUp() sleep(0.5) Text.EraseChar(5) sleep(0.5) Cursor.LineUp() sleep(0.5) Text.InsertLine() sleep(0.5) Cursor.LineUp(3) sleep(0.5) Text.DeleteLine() print(Fore.BRIGHT_GREEN) sleep(1) Text.CharSetLineDrawing() print(\"This text is printed with the Line Drawing character set\") sleep(1) print(\"j k l m n q t u v w x a f g y z { } | ` ~ \") sleep(1) Text.CharSetASCII() print(\"This text is printed with the default ASCII character set\") ![demo-text.gif](../images/demo-text.gif \"demo-text.py\")","title":"Example"},{"location":"api/utils/","text":"Utils","title":"Utils"},{"location":"api/utils/#utils","text":"","title":"Utils"}]}